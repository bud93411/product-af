<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.block("application/select", {
    initialize: function (data) {

    },
    getOutputs: function (inputs) {
        var type = request.getParameter('type');
        var hasApplicationAccessPermission = jagg.module("permission").isUserAccessGrantedForPlatform(PERMISSION_APPLICATION_MEMBER);
        var helpTips = jagg.module("help").getHelpTips("addApplication");
        var modManager = jagg.module("manager");
        var applicationTypeBeanMap = modManager.getApplicationTypeManager().getApplicationTypeBeanMap();
        var applicationTypes = applicationTypeBeanMap.keySet().toArray();
        var applicationTypesHolder = [];
        if (applicationTypes) {

            for (var i = 0; i < applicationTypes.length; i++) {
                var applicationTypeBean = modManager.getApplicationTypeBean(applicationTypes[i]);
                var isUploadableAppType = applicationTypeBean.isUploadableAppType();
                var tempAppType = {};
                tempAppType.appType = applicationTypes[i];
                tempAppType.displayOrder = applicationTypeBean.getDisplayOrder();
                tempAppType.applicationTypeBean = applicationTypeBean;
                if (type === "existing" && isUploadableAppType) {
                    applicationTypesHolder.push(tempAppType);
                } else if(type === "new" && !isUploadableAppType){
                    applicationTypesHolder.push(tempAppType)
                }
            }
            applicationTypesHolder.sort(function (a, b) {
                if (a.displayOrder == b.displayOrder) {
                    return (a.appType > b.appType) ? 1 : -1;
                }
                return (a.displayOrder > b.displayOrder) ? 1 : -1;
            });
        }
        return {
            "applicationTypesHolder": applicationTypesHolder,
            "type": type,
            "helpTips": helpTips,
            "hasApplicationAccessPermission": hasApplicationAccessPermission
        };
    }
});
%>
