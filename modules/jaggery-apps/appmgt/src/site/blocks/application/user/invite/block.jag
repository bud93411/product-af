<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var modTenant = jagg.module("tenant");
var modApplication = jagg.module("application");
var userIdentifier = "userName";
var log = new Log();
var permissionModule = jagg.module("permission");
jagg.block("application/user/invite", {
    initialize:function (data) {

    },
    getInputs:function () {
        return {
            "applicationKey":null
        }
    },

    getOutputs: function (inputs) {

        var applicationKey = request.getParameter("applicationKey");
        var hasInviteUserPermission = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_USER_INVITE);
        if(!hasInviteUserPermission){
            response.sendError(401, "Unauthorized!!! Only Application Owner has permission to complete this action");
        }

        try {
            var isOTTenant = session.get(TENANT_INFO).isOTTenant;
            var uninvitedTenantUsers = getUninvitedTenantUsers(applicationKey);
            var hasTenantLevelUserMgtPermission = permissionModule.hasTenantLevelUserMgtPermission();
            return {
                "hasInviteUserPermission": hasInviteUserPermission,
                "isOTTenant": isOTTenant,
                "uninvitedTenantUsers": uninvitedTenantUsers,
                "hasTenantLevelUserMgtPermission":hasTenantLevelUserMgtPermission
            };
        } catch(e) {
            log.error(e);
            response.sendError(400, "Error Ouccerred while getting user info");
        }
    }
});

function getUninvitedTenantUsers(applicationKey){
    var arrayUtils = require('/site/themes/default/js/appfac/arrayUtils.js');
    var tenantUsers = modTenant.getUsersOfTenant();
    var existingApplicationUsers = modApplication.getTeamMembersOfApplication(applicationKey);
    tenantUsers.sort(arrayUtils.dynamicSort(userIdentifier));
    existingApplicationUsers.sort(arrayUtils.dynamicSort(userIdentifier));
    return arrayUtils.inverseIntersection(tenantUsers,existingApplicationUsers,userIdentifier);
}

%>
