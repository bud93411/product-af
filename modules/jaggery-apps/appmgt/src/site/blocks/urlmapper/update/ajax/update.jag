<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var lifeCycleModule = jagg.module("lifecycle");
var log=new Log();
var mod = jagg.module("urlmapper");
var permission = jagg.module("permission");

(function () {
	var action = request.getParameter("action"),
	site = require("/site/conf/site.json");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if(action == "mapNewCustomUrlToVersion"){
        var newCustomUrl = request.getParameter("newCustomUrl");
        newCustomUrl = newCustomUrl.toLowerCase();
        var version = request.getParameter("version");
        var applicationKey = request.getParameter("applicationKey");
        var stage = getProperty(FINE_GRAINED_DOMAIN_MAPPING);
        if ( permission.isUserAccessGranted(applicationKey, PERMISSION_DOMAIN_MAPPING)){
            try {
                mod.mapNewCustomUrlToVersion(stage,newCustomUrl,applicationKey,version,true);
            } catch (e) {
                // we are logging this as warn messages since this is caused, due to an user error. For example if the
                // user entered a rubbish custom url(Or a url which is, CNAME record is not propagated at the
                // time of adding the url), then url validation will fail but it is not an system error
                var msg = "Error while updating domain mapping(custom url) to "+newCustomUrl+ " for application: "+ applicationKey +
                        " version: "+version+" in stage: "+ stage;
                log.warn(msg);
                log.warn(e);
                response.status = 400;
                response.content = e;
            }
        } else {
            response.sendError(401, "Unauthorized!!! Only Application Owner has permission to complete this action");
        }
    } else if(action == "updateExistingUnmappedCustomUrl"){
        var newCustomUrl = request.getParameter("newCustomUrl");
        newCustomUrl = newCustomUrl.toLowerCase();
        var applicationKey = request.getParameter("applicationKey");

        if (permission.isUserAccessGranted(applicationKey, PERMISSION_DOMAIN_MAPPING)){
            var stage = getProperty(FINE_GRAINED_DOMAIN_MAPPING);

            try {
                mod.updateExistingUnmappedCustomUrl(stage,newCustomUrl,applicationKey);
            } catch (e) {
                // we are logging this as warn messages since this is caused, due to an user error. For example if the
                // user entered a rubbish custom url(Or a url which is, CNAME record is not propagated at the
                // time of adding the url), then url validation will fail but it is not an system error
                var msg = "Error while updating unmapped custom url to: "+newCustomUrl+ " for application: "
                        +applicationKey +" in stage: "+ stage;
                log.warn(msg);
                log.warn(e);
                response.status = 400;
                response.content = e;
            }
        } else {
            response.sendError(401, "Unauthorized!!! Only Application Owner has permission to complete this action");
        }
    } else if(action == "remapDomainToVersion"){
        var oldVersion = request.getParameter("oldVersion");
        var newVersion = request.getParameter("newVersion");
        var applicationKey = request.getParameter("applicationKey");
        var stage = getProperty(FINE_GRAINED_DOMAIN_MAPPING);

        if (permission.isUserAccessGranted(applicationKey, PERMISSION_DOMAIN_MAPPING)){
            try {
                mod.remapDomainToVersion(stage, applicationKey, newVersion,oldVersion);
            } catch (e) {
                var msg = "Error while remapping the production url(s) from version: "+oldVersion
                        +" to version:"+newVersion+" for application: "+applicationKey +" in stage: "+ stage;
                log.error(msg);
                log.error(e);
                response.status = 400;
                response.content = e;
            }
        } else {
            response.sendError(401, "Unauthorized!!! Only Application Owner has permission to complete this action");
        }
    } else if(action == "updateDomainMapping"){

        var newCustomUrl = request.getParameter("productionCustom");
        newCustomUrl = newCustomUrl.toLowerCase();
        var newVersionToMap = request.getParameter("productionVersion");
        var applicationKey = request.getParameter("applicationKey");
        if (permission.isUserAccessGranted(applicationKey, PERMISSION_DOMAIN_MAPPING)){
            try {
                changeDomainMapping(applicationKey, newVersionToMap, newCustomUrl);
            } catch (e) {
                var msg = "Error while updating the production/customer url(s) "
                            +( (newVersionToMap) ? " to version:"+newVersionToMap:"")
                            +( (newCustomUrl) ?" to new custom URL:"+newCustomUrl:"")
                            +" for application: "+applicationKey
                            +", tenantDomain:"+jagg.module("manager").getTenantDomain();
                log.error(msg);
                log.error(e);
                response.status = 400;
                response.content = e;
            }
        } else {
            response.sendError(401, "Unauthorized!!! Only Application Owner has permission to complete this action");
        }
    } else if(action == "removeCustomUrl"){
        var applicationKey = request.getParameter("applicationKey");
        var stage = getProperty(FINE_GRAINED_DOMAIN_MAPPING);
        if (permission.isUserAccessGranted(applicationKey, PERMISSION_DOMAIN_MAPPING)){
            try {
                mod.removeDomainMappingFromApplication(stage,applicationKey,null,true);
            } catch (e) {
                var msg = "Error while removing custom url for application: "+ applicationKey;
                log.error(msg);
                log.error(e);
                response.status = 400;
                response.content = e;
            }
        } else {
            response.sendError(401, "Unauthorized!!! Only Application Owner has permission to complete this action");
        }
    } else {
		throw new Error("No action specified");
	}
}());


function changeDomainMapping(applicationKey, newVersionToMap, newCustomUrl){
    var modApplication = jagg.module("application");
    var modUrlMapper = jagg.module("urlmapper");
    var domainMappingAllowedStage = getProperty(FINE_GRAINED_DOMAIN_MAPPING);
    var initialAppVersionInfo = modApplication.getAppVersionsByStage(applicationKey, domainMappingAllowedStage);

    var existingCustomUrl = initialAppVersionInfo.customUrl;
    var existingMappedVersion = getExistingMappedVersion(initialAppVersionInfo.versions);
    if(newCustomUrl == existingCustomUrl && (existingMappedVersion) && ! newVersionToMap){
        throw "Cannot remove existing mapped version";
    }
    if(newCustomUrl) {  // if new custom Url is defined
        if(existingMappedVersion){      // if there is already existing mapped version
            modUrlMapper.mapNewCustomUrlToVersion(
                    domainMappingAllowedStage,newCustomUrl,applicationKey,newVersionToMap,true);
        } else {        // if there is no already existing mapped version
            if(existingCustomUrl){      // if there is existing custom url
                modUrlMapper.updateExistingUnmappedCustomUrl(domainMappingAllowedStage,newCustomUrl,applicationKey);
            } else {                    // if there is no existing custom url
                modUrlMapper.addNewCustomUrl(domainMappingAllowedStage, newCustomUrl, applicationKey, null, true);
            }
            modUrlMapper.remapDomainToVersion(
                    domainMappingAllowedStage, applicationKey, newVersionToMap,existingMappedVersion);
        }
    } else {        // if new custom url is not defined
        if(existingCustomUrl){
            modUrlMapper.removeDomainMappingFromApplication(domainMappingAllowedStage,applicationKey,null,true);
        } else {
            modUrlMapper.remapDomainToVersion(
                    domainMappingAllowedStage, applicationKey, newVersionToMap,existingMappedVersion);
        }

    }
}

function getExistingMappedVersion(versionsArray){
    for (var i = 0; i < versionsArray.length; i++) {
        var version = versionsArray[i];
        if(version.productionMappedDomain){
            return version.version;
        }
    }
    return null;
}


%>

