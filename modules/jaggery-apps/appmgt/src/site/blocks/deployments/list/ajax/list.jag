<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log("blocks/deployments/list/ajax/list.jag");

(function () {
    var action = request.getParameter("action");
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }

    if(action == "getAppVersionMainInfo") {
        log.error("&****************************************(((((((((((((((((((((((((((((((((((((");
        var applicationKey = request.getParameter("applicationKey");
        var userName = jagg.getUser();
        var isRoleBasedPermissionAllowed = request.getParameter("isRoleBasedPermissionAllowed");
        var metaDataNeed = request.getParameter("metaDataNeed");
        var buildableforstage = request.getParameter("buildableforstage");
        var applicationType = modManager.getApplicationType(applicationKey);
        var modApp = jagg.module("application");
        var modPermission = jagg.module("permission");

        if(modPermission.isUserAccessGranted(applicationKey, PERMISSION_APPLICATION_MEMBER)) {
            var appVersions = modApp.getAppVersionsInStages(applicationKey, userName, metaDataNeed, buildableforstage, isRoleBasedPermissionAllowed);
            if(appVersions != null) {
                var appInfo = parse(appVersions);
            }

            var result = {}};
            for(var appIndex in appInfo) {
                var versionData = [];
                var elementAppInfo = appInfo[appIndex];
                var versions = elementAppInfo.versions;
                for(var index in versions) {
                    var version = {};
                    var versionElement = versions[index];
                    version.version = versionElement.version;
                    version.stage = versionElement.stage;
                    versionData.push(version);
                }
            }
            result.data = versionData;
            print(result);
    } else {
        throw new Error("No action specified" + action);
    }
}());

%>
