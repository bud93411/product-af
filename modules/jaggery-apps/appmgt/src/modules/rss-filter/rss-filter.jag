<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log("modules/rss-filter.jag");
var modManager = jagg.module("manager");
var rssAdapter = Packages.org.wso2.carbon.appfactory.core.dao.ResourceManager;
var carbon = require('carbon');
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;


/**
 * add database to APP Factory database
 * @param databaseName - name of the database
 * @param applicationKey - key of the application
 * @param environment - environment
 * @param databaseDescription - description of the database
 */
var addDatabase = function (databaseName, applicationKey, environment, databaseDescription) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database info to App Factory database; database name: " + databaseName + ", applcation Id: " +
        applicationKey + " and stage: " + environment);
    }
    var tenantDomain = modManager.getTenantDomain() ;
    try {
        rssAdapter.addDatabase(databaseName, applicationKey, environment, databaseDescription);
	} catch(e) {
        var msg = "Error while adding database : " + databaseName + " for tenant: " + tenantDomain +
            " , applcation Id: " + applicationKey + " and stage: " + environment;
        log.error(msg);
        log.error(e);
        throw e;
	}
};
var addDatabaseUser = function (databaseUserName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database user info to RXT " + databaseUserName);
    }
   var tenantDomain=modManager.getTenantDomain();
	try{
         rssAdapter.addDatabaseUser(databaseUserName, application, environment);
	}catch(e){
        log.error("Error while adding database user : " + databaseUserName + " to application :  " + application
                  + " in environment : " + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
	}
    
};
var addDatabaseTemplate = function (databaseTemplateName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database template info to RXT " + databaseTemplateName);
    }
    var tenantDomain=modManager.getTenantDomain() ;
    try{
        rssAdapter.addDatabaseUserPermissionTemplate(databaseTemplateName, application, environment); 
    }catch(e){
        log.error("Error while adding database template : " + databaseTemplateName + " to application : " + application
                  + " in environment : " + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
   }

 
};
var getAllDatabases = function (application, environment, allDatabases) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all database info of " + application + " in " + environment);
    }
    var filteredDBs = [];
    //ToDo: What is the reason for this filtering???
    //Storage server returns all the databases belongs to the tenant.
    //We need to filter this list and get db created for this application only.
    //Once we have role based filtering in SS we do not need to do this.
     
    var names;
    var tenantDomain=modManager.getTenantDomain();
    try{
        names = rssAdapter.getAllDatabases(application, environment);
    }catch(e){
        log.error("Error while getting all databases of application : " + application + " in environment : "
                  + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
    }
    if (log.isDebugEnabled()) {
        log.debug("Received database info from  RXT " + names);
    }
    for (var name in names) {

        for (var db in allDatabases) {

            if (names[name] == getTenantAwareDBName(allDatabases[db].dbName)) {
                filteredDBs.push(allDatabases[db]);
                if (log.isDebugEnabled()) {
                    log.debug("Filtered database " + names[name]);
                }

            }
        }
    }
    return filteredDBs;

};
var getAllDatabaseUsers = function (application, environment, allUsers) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all users of " + application + " in " + environment);
    }
    var userNames;
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try{
       userNames = rssAdapter.getAllDatabaseUsers(application, environment);
    }catch(e){
       log.error("Error while getting all database users of application : " + application + " in environment : "
                 + environment + " of tenant domain : " + tenantDomain);
       log.error(e);
       throw e;
    }

    var filteredUsers = [];
    for (var userName in userNames) {
       for(var user in allUsers){
        if (userNames[userName] == allUsers[user].name) {
            filteredUsers.push(allUsers[user]);
            if (log.isDebugEnabled()) {
                log.debug("Filtering user " + userNames[userName]);
            }
        }
      }
    }

return filteredUsers;
};

var isDatabaseUserExists = function (application, environment, user) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all users of " + application + " in " + environment);
    }
   var tenantDomain=modManager.getTenantDomain();
   try{
         return rssAdapter.isDatabaseUserExist(application,user,environment);
    }catch(e){
       log.error("Error while checking database user : " + user + " of application : " + application
                 + " in environment : " + environment + " of tenant domain : " + tenantDomain);
       log.error(e);
       throw e;
    }
    return false;
};
var getAllDatabaseTemplates = function (application, environment, allTemplates) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all template of " + application + " in " + environment);
    }
    var templateNames;
    var tenantDomain=modManager.getTenantDomain();
	try{
    	templateNames = rssAdapter.getAllDatabasePrivilegeTemplates(application, environment);
	}catch(e){
        log.error("Error while retrieving  all database templates of application : " + application
                  + " in environment : " + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
	}

    var filteredTemplates = [];
    for (var templateName in templateNames) {

        for (var template in allTemplates) {
            if (templateNames[templateName] == getEnvironmentAwareTemplateName(allTemplates[template].name)) {

                filteredTemplates.push(allTemplates[template]);
                if (log.isDebugEnabled()) {
                    log.debug("Filtering template " + templateNames[templateName]);
                }
            }
        }
    }
    return filteredTemplates;
};
var deleteDatabase = function (databaseName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting db " + databaseName);
    }
 
    var tenantDomain=modManager.getTenantDomain();
	try{
    	rssAdapter.deleteDatabase(databaseName, application, environment);
	}catch(e){
        log.error("Error while deleting database : " + databaseName + " of application : " + application
                  + " in environment : " + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
	}
};
var deleteDatabaseUser = function (databaseUserName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting user " + databaseUserName);
    }
  
    var tenantDomain=modManager.getTenantDomain() ;
    try{
        rssAdapter.deleteDatabaseUser(databaseUserName, application, environment);
    }catch(e){
        log.error("Error while deleting database user : " + databaseUserName + " of application : "
                  + application + " in environment : " + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
   }
};
var deleteDatabaseTemplate = function (databaseTemplateName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting template " + databaseTemplateName);
    }
    var tenantDomain=modManager.getTenantDomain() ;
    try{
    	rssAdapter.deleteDatabaseUserPermissionTemplate(databaseTemplateName, application, environment);
    }catch(e){
        log.error("Error while deleting database template : " + databaseTemplateName + " of application : "
                  + application + " in environment : " + environment + " of tenant domain : " + tenantDomain);
        log.error(e);
        throw e;
    }
};

var getTenantAwareDBName = function (fullName) {
    return fullName;
};
var getEnvironmentAwareTemplateName = function (fullName) {
    return fullName.substr(0, fullName.lastIndexOf('@')).replace('@','..');
};

/**
 * Get all databases info from App Factory database
 * @param applicationKey - key of the application
 * @param environment - environment
 * @return array of database information
 */
var getAllDatabasesInfo = function (applicationKey, environment) {

    if (log.isDebugEnabled()) {
        log.debug("Getting all databases info for applicationKey: " + applicationKey + " & stage: " + environment);
    }

    var resultInfo = [];
    var resources = [];
    var tenantDomain = modManager.getTenantDomain();

    try {
        resources = rssAdapter.getAllDatabasesInfo(applicationKey, environment);
    } catch (e) {
        var msg = "Error while getting all database info for tenant: " + tenantDomain + ", applicationKey: "
            + applicationKey + " and environment: " + environment;
        log.error(msg);
        log.error(e);
        throw e;
    }

    for (var resource in resources) {
        var resourceInfo = {};
        resourceInfo.stage = environment;
        resourceInfo.name = resources[resource].name;
        resourceInfo.description = resources[resource].description;
        resultInfo.push(resourceInfo);
    }

    return resultInfo;
};

/**
 * Get all datasources info from App Factory database
 * @param applicationKey - key of the application
 * @param environment - environment
 * @return array of datasource information
 */
var getAllDatasourcesInfo = function (applicationKey, environment) {

    if (log.isDebugEnabled()) {
        log.debug("Getting all datasources info for applicationKey: " + applicationKey + " & stage: " + environment);
    }

    var resultInfo = [];
    var resources = [];
    var tenantDomain = modManager.getTenantDomain();

    try {
        resources = rssAdapter.getAllDatasourceInfo(applicationKey, environment);
    } catch (e) {
        var msg = "Error while getting all datasource info for tenant: " + tenantDomain + ", applicationKey: " +
            applicationKey + " and environment:" + environment;
        log.error(msg);
        log.error(e);
        throw e;
    }

    for (var resource in resources) {
        var resourceInfo = {};
        resourceInfo.stage = environment;
        resourceInfo.name = resources[resource].name;
        resourceInfo.description = resources[resource].description;
        resultInfo.push(resourceInfo);
    }

    return resultInfo;
};

/**
 * Add datasource to App Factory database
 * @param name - name of the datasource
 * @param applicationKey - key of the application
 * @param environment - environment
 * @param description - description of the datasource
 */
var addDatasource = function (name, applicationKey, environment, description) {

    if (log.isDebugEnabled()) {
        log.debug("Add datasource to App Factory database : datasource name: " + name + ", application key: " +
        applicationKey + " and stage: " + environment);
    }

    var resultInfo = [];
    var resources = [];
    var tenantDomain = modManager.getTenantDomain();

    try {
        resources = rssAdapter.addDatasource(name, applicationKey, environment, description);
    } catch (e) {
        var msg = "Error while adding datasource info : tenant: " + tenantDomain + ", application: " +
            applicationKey + " and environment:" + environment;
        log.error(msg);
        log.error(e);
        throw e;
    }

    for (var resource in resources) {
        var resourceInfo = {};
        resourceInfo.stage = environment;
        resourceInfo.name = resources[resource].name;
        resourceInfo.description = resources[resource].description;
        resultInfo.push(resourceInfo);
    }

    return resultInfo;
};

/**
 * Delete datasource from App Factory database
 * @param datasourceName - name of the datasource
 * @param applicationKey - key of the application
 * @param environment - environment
 */
var deleteDatasource = function (datasourceName, applicationKey, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting datasource: datasource name: " + datasourceName + " , applicationkey: " +
        applicationKey + " & stage:" + environment);
    }

    var tenantDomain = modManager.getTenantDomain();

    try {
        rssAdapter.deleteDatasource(datasourceName, applicationKey, environment);
    } catch (e) {
        var msg = "Error while deleting datasource from app factory db : tenant: " + tenantDomain +
            ", applicationKey: " + applicationKey + " and environment:" + environment;
        log.error(e);
        log.error(msg);
        throw e;
    }
};

var isDatabaseExist = function(databaseName, environment){

    var tenantDomain = modManager.getTenantDomain();
    var result;

    try {
        result = rssAdapter.isDatabaseExistForTenant(databaseName, environment, tenantDomain);
    } catch (e) {
        var msg = "Error while checking databse existence from app factory db : tenant: " + tenantDomain +
                ", application: " + applicationId + " and environment:" + stage;
        log.error(e);
        log.error(msg);
        throw e;
    }
    return result;
}

var isDataSourceExist = function(datasourceName, applicationId, stage){

    var tenantDomain = modManager.getTenantDomain();
    var result;
    try {
        result = rssAdapter.isDatasourceExist(datasourceName, applicationId, stage);
    } catch (e) {
        var msg = "Error while checking datasource existance from app factory db : tenant: " + tenantDomain +
                ", application: " + applicationId + " and environment:" + stage;
        log.error(e);
        log.error(msg);
        throw e;
    }
    return result;
}

var isTemplateExist = function(templateName, applicationId, stage) {

    var tenantDomain = modManager.getTenantDomain();
    var result;

    try {
        result = rssAdapter.isDatabaseUserPermissionTemplateExist(templateName, applicationId, stage);
    } catch (e) {
        var msg = "Error while checking template :" + templateName+ " from app factory db : tenant: " + tenantDomain +
            ", application: " + applicationId + " and environment:" + stage;
        log.error(e);
        log.error(msg);
        throw e;
    }
    return result;
}
%>
