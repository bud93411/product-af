<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log("modules/events/subscribe/subscribe.jag");
var modManager = jagg.module("manager");
var applicationModule = jagg.module("application");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var SubscriptionManager = Packages.org.wso2.carbon.appfactory.eventing.jms.SubscriptionManager;
var MessageStore = Packages.org.wso2.carbon.appfactory.eventing.jms.MessageStore;
var result = {};


var subscribe = function (topic, subscriberId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var subscriptionManager = SubscriptionManager.getInstance();
    subscriptionManager.startSubscription(topic, subscriberId);
};
var pollMessages = function (topic, subscriberId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var result = [];
    var messageStore = MessageStore.getInstance();
    var messages = messageStore.getMessages(topic, subscriberId);
    for (var i = 0; i < messages.length; i++) {
        var message = {};
	    message.topic = topic;
        message.id = messages[i].getJMSMessageID();
        message.messageBody = messages[i].getString('messageBody');
        message.messageTitle = messages[i].getString('messageTitle');
        result.push(message);
    }
    return result;
};
var acknowledgeMessage = function (topic, subscriberId, messageId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var messageStore = MessageStore.getInstance();
    messageStore.acknowledgeMessage(topic, subscriberId, messageId);
};
var stopSubscription = function (topic, subscriberId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var subscriptionManager = SubscriptionManager.getInstance();
    subscriptionManager.stopSubscription(topic, subscriberId);
};


var stopAllSubscriptions = function (uid) {
    if(jagg.getUser() == null){
        return;
    }
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var subscriptionManager = SubscriptionManager.getInstance();
    subscriptionManager.stopAllSubscriptions(uid);
};


var restartSubscription = function (subscriber) {
    subscriber.restart();
};
var getUserTopics = function(){
       var topics = [];
       var userApps = session.get(APPLICATION_LIST_CACHE);
       if(userApps == null) {
          userApps = mod.getAllAppsOfUser(jagg.getUser());
          session.put(APPLICATION_LIST_CACHE, userApps);
       }

       var parsedArray = parse(userApps);
        for (var i = 0; i < parsedArray.length; i++) {
            var application = parsedArray[i];
		topics[i]=application.key;
	}
	topics[parsedArray.length] = 'APPLICATION_CREATION';
	return topics;	
}
%>

