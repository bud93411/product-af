<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log("module/urlmapper/urlmapper.jag");
var modManager = jagg.module("manager");

var addDefaultProdUrl = function(appKey, version){
    var service = getDomainMappingManagementService();
    try {
        service.addDefaultProdUrl(appKey, version);
    } catch (e){
        // In this case we log the error messages here which is different from the other modules since the message to
        // display in the app wall is generated from the back end(java layer). We log the exception here and throw the
        // generated back end message to front end, such that it can be directly shown in the UI
        log.error("Error while adding default production url for application id : "+ appKey + " version : " + version);
        log.error(e);
        throw e.javaException.getMessage();
    }
}

/**
 * add new domain mapping for the application
 */
var addNewCustomUrl = function(stage,domain,appKey,version,isCustomDomain){
    var service = getDomainMappingManagementService();
    try{
        service.addNewSubscriptionDomain(stage,domain,appKey,version,isCustomDomain);
    } catch (e) {
        // In this case we log the error messages here which is different from the other modules since the message to
        // display in the app wall is generated from the back end(java layer).
        // We are logging this as warn messages since this is caused, due a to user error. For example if the
        // user entered a rubbish custom url(Or a url which CNAME record is not propagated at the time of
        // adding the url), then url validation will fail but it is not an system error
        log.warn("Error while adding new custom domain : " + domain + " in stage : " + stage + " for application : "
                  + appKey + " with version : " + version);
        log.warn(e);
        // The message to display in the app wall is generated from the back end(java layer). Here we throw the
        // generated back end message to front end, such that it can be directly shown in the UI
        throw e.javaException.getMessage();
    }
};

/**
 * Remove previously unmapped sub domain and add a new domain
 *
 */
var updateExistingUnmappedCustomUrl = function(stage,newDomain,appKey){
    var service = getDomainMappingManagementService();
    try{
        service.remapContextToDomain(stage,newDomain,appKey,null,true);
    } catch (e) {
        // In this case we log the error messages here which is different from the other modules since the message to
        // display in the app wall is generated from the back end(java layer).
        // We are logging this as warn messages since this is caused, due a to user error. For example if the
        // user entered a rubbish custom url(Or a url which CNAME record is not propagated at the time of
        // adding the url), then url validation will fail but it is not an system error
        log.warn("Error while updating domain : " + newDomain + " in stage : " + stage + " for application : " +
                                                                                                               appKey);
        log.warn(e);
        // The message to display in the app wall is generated from the back end(java layer). Here we throw the
        // generated back end message to front end, such that it can be directly shown in the UI
        throw e.javaException.getMessage();
    }
};

/**
 * Remap {@code newDomain} to {@code version}
 *
 */
var mapNewCustomUrlToVersion = function(stage,newDomain,appKey,version){
    var service = getDomainMappingManagementService();
    try{
        service.remapContextToDomain(stage,newDomain,appKey,version,true);
    } catch (e) {
        // In this case we log the error messages here which is different from the other modules since the message to
        // display in the app wall is generated from the back end(java layer).
        // We are logging this as warn messages since this is caused, due a to user error. For example if the
        // user entered a rubbish custom url(Or a url which CNAME record is not propagated at the time of
        // adding the url), then url validation will fail but it is not an system error
        log.warn("Error while mapping new domain : " + newDomain + " to version : " + version + " in stage : " + stage
                  + " for application : " + appKey);
        log.warn(e);
        // The message to display in the app wall is generated from the back end(java layer). Here we throw the
        // generated back end message to front end, such that it can be directly shown in the UI
        throw e.javaException.getMessage();
    }
};

/**
 * Remap given domain from {@code previousVersion} to {@code newVersion}
 *
 */
var remapDomainToVersion = function(stage, appKey, newVersion, previousVersion){
    var service = getDomainMappingManagementService();
    try{
        service.remapDomainToContext(stage, appKey, newVersion, previousVersion);
    } catch (e) {
        log.error("Error while remapping domain for application : " + appKey + " from version : " + previousVersion
                  + " to version : " + newVersion + " in stage : " + stage);
        log.error(e);
        // The message to display in the app wall is generated from the back end(java layer). Here we throw the
        // generated back end message to front end, such that it can be directly shown in the UI
        throw e.javaException.getMessage();
    }
};

/**
 * Remap domain mapping from application
 *
 */
var removeDomainMappingFromApplication = function(stage, appKey, version, isCustomDomain){
    var service = getDomainMappingManagementService();
    try{
        service.removeDomainMappingFromApplication(stage, appKey, version, isCustomDomain);
    } catch (e) {
        log.error("Error while removing domain mapping from application : " + appKey + " with version : " + version
                  + " in stage : " + stage);
        log.error(e);
        // The message to display in the app wall is generated from the back end(java layer). Here we throw the
        // generated back end message to front end, such that it can be directly shown in the UI.
        throw e.javaException.getMessage();
    }
};

var getDomainMappingManagementService = function(){
    try{
        var carbon = require('carbon');
        return carbon.server.osgiService('org.wso2.carbon.appfactory.s4.integration.DomainMappingManagementService');
    } catch(e) {
        log.error("Error while getting DomainMappingManagementService for tenant domain : " + tenantDomain);
        log.error(e);
        throw "Error occurred during the requested operation. Please try again after few seconds!";
    }

};


%>
