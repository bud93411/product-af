<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");


var log = new Log("module/application/users/get/list.jag");

 var modManager = jagg.module("manager");
 var carbon = require('carbon');
 var server = carbon.server;
 var appfactory = require('appFactory');
 var multitenancy = carbon.multitenancy;

// get the roles of the logged in user for the given application
 var getUsersOfApplication = function(applicationKey){
	jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER);
 	var users, tenantDomain=modManager.getTenantDomain();
 	var context=multitenancy.getPrivilegedCarbonContext();
 	var tenantManager= multitenancy.getTenantManager();
 	users= server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationUserManagementService').getUsersOftheApplication(applicationKey);
 	var resultUsers=[];
 	for (var k in users) {
		var user = users[k];
		var object = {};
		object.userName = user.userName;
		object.firstName = user.firstName;
		object.lastName = user.lastName;
		object.email = user.email;
		object.roles=user.roles;
		object.displayName = user.displayName;
		var displayRoles=[];
		for (var i in user.roles) {
			var roleDisplayName = getProperty("TenantRoles.Role." + user.roles[i] + ".DisplayName");
			if(roleDisplayName != null) {
				displayRoles.push(roleDisplayName);
			}
		}
		object.displayRoles = displayRoles;
		resultUsers.push(object);
	}	
 	return resultUsers;
 }

var getTeamMembersOfApplication = function(applicationKey){
	jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER);
	var users, tenantDomain=modManager.getTenantDomain();
	var context=multitenancy.getPrivilegedCarbonContext();
	var tenantManager= multitenancy.getTenantManager();
	users= server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationUserManagementService').getUsersOftheApplication(applicationKey);
	var resultUsers=[];
	for (var k in users) {
		var user = users[k];
		var object = {};
		object.userName = user.userName;
		object.email = user.email;
		object.name = user.displayName;
		object.roles = user.roles;
		var displayRoles=[];
		for (var i in user.roles) {
			var roleDisplayName = getProperty("TenantRoles.Role." + user.roles[i] + ".DisplayName");
			if(roleDisplayName != null) {
				displayRoles.push({"roleType":roleDisplayName ,"role":user.roles[i]});
			}
		}

		object.displayRoles = displayRoles;
		resultUsers.push(object);
	}
	return resultUsers;
}

var getUserAccess = function(applicationKey, userName) {
	// no need to secure, internal calls are secured.
	var jsonFeed = {};
    //returning everything as true since we do not have application based roles anymore.
    jsonFeed.userHasAccess = true;
    jsonFeed.adminPrivilege = true;
    jsonFeed.devOpsPrivilege = true;
    jsonFeed.developerPrivilege = true;

	return stringify(jsonFeed);
};

var getTrunkURL = function(applicationKey) {
    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_APPLICATION_MEMBER);
    var repositoryType=getProperty(PREFERRED_REPOSITORY_TYPE);
	return getProperty('RepositoryProviderConfig.'+ repositoryType+'.Property.BaseURL')+'/'+repositoryType+'/'+applicationKey+'/trunk';
};
%>
