<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/resources/apis/key/key.jag');

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var regManager = jagg.module("registry");
var resManager = jagg.module("resources");
var permissionModule = jagg.module("permission");

var getSavedKeys = function (applicationId, userName, isSync, envKeyConstants) {
	if (isSync === "true") {
        var keys;
        var tenantDomain=modManager.getTenantDomain() ;
        var context=multitenancy.getPrivilegedCarbonContext();
        var tenantManager= multitenancy.getTenantManager();
        try{
            var service = server.osgiService('org.wso2.carbon.appfactory.apiManager.integration.APIManagerIntegrationService') ;
            keys = service.getSavedKeys(applicationId, jagg.getUser(), session.get("SAML_TOKEN"));

            if(log.isDebugEnabled()){
                log.debug("Invoking service "+service+" returned result:"+keys);
            }

            //If users has subscribed to APIs but keys are not generated
            if(!keys || keys.length == 0){
                return null;
            }

            var mainDictionary = createDataStructure(keys);
            write(mainDictionary[API_MANAGER_PROD], mainDictionary[API_MANAGER_SANDBOX], applicationId);
        }catch(e){
            log.error("Error while retrieving saved keys for application id : " + applicationId + " of tenant domain : "
                      + tenantDomain);
            log.error(e);
            throw e;
        }
	}
	return readFromRegistry(applicationId, envKeyConstants);
};

var write = function (prodDictionary, sandboxDictionary, applicationId) {
	try{
		resManager.putResourcesForCollectionInStages(sandboxDictionary,"","",applicationId,getProperties(SANDBOX_KEYS_PROPERTY));
	}catch (e) {
		log.error("Error while saving sandbox keys : " + sandboxDictionary + " for application id : " + applicationId);
		log.error(e);
		throw e;
	}

	try{
		resManager.putResourcesForCollectionInStages(prodDictionary,"","",applicationId,getProperties(PRODUCTION_KEYS_PROPERTY));
	}catch (e) {
		log.error("Error while saving production keys : " + prodDictionary + "for application id : " + applicationId);
		log.error(e);
		throw e;
	}

};

var writeToRegistry = function(envs, dictonary, appId){
	try {
		for (var j in dictonary) {
			var elm = dictonary[j];
			resManager.updatePropertyInStages(elm.name, elm.value, "", "", appId, envs);
		}
	} catch (e) {
		log.error("Error while writing to registry for application id : " + appId);
		log.error(e);
		throw e;
	}
};

var readFromRegistry = function (applicationId , envKeyConstants) {
	var mainDictionary = {
	};
	for(var stage in envKeyConstants){
		var keys = envKeyConstants[stage];
		for (var k in keys) {
			var keyName = keys[k];
			var commonKeyName = keyName.slice(7,keyName.length);
			if(stage == "Production"){
				commonKeyName = keyName.slice(4,keyName.length);
			}
			var keyValue = "";
			try {
				keyValue = resManager.getPropertyValueInStage(commonKeyName, applicationId, stage);
			} catch (e) {
				//we don't throw error here, since throwing will break the for loop.
				log.error("Error occurred while retrieving saved key : " + keyName + " from registry for "
						  + "application id : " + applicationId + " in stage : " + stage);
				log.error(e);
			}
			mainDictionary[keyName] = keyValue;
		}
	}

	if (log.isDebugEnabled()) {
		log.debug("Main Dictionary: " + mainDictionary);
	}
	return mainDictionary;
};

var createDataStructure = function (elements) {
	// var elementsArray = [];
	var mainDictionary = {
	};
	var prodDictionary = [];
	var sandboxDictionary = [];

	for (var i in elements) {
		var entry = elements[i];
		var object = {};
		object.name = entry.type + "";
		var length = object.name.length;
		object.value = entry.value;
		object.isSynced = entry.isSynced;

		if (object.name.indexOf(API_MANAGER_PROD) !== -1) {

			// Slicing is done to remove "prod" part with the assumption that API-M will keep this as a constant
			var commonName = object.name.slice(4,length);
			object.name = commonName;
			if (prodDictionary[commonName] == null) {
				prodDictionary.push("Value");
				prodDictionary[commonName] = object;
			}
		} else if (object.name.indexOf(API_MANAGER_SANDBOX) !== -1) {

			// Slicing is done to remove "sandbox" part with the assumption that API-M will keep this as a constant
			var commonName = object.name.slice(7,length);
			object.name = commonName;
			if (sandboxDictionary[commonName] == null) {
				sandboxDictionary[commonName] = object;
			}
		} else {
			log.error("Undefined environment " + applicationKey);
			throw "Error while retrieving saved keys for " + applicationKey;
		}
	}

	mainDictionary[API_MANAGER_PROD] = prodDictionary;
	mainDictionary[API_MANAGER_SANDBOX] = sandboxDictionary;
	if (log.isDebugEnabled()) {
		log.debug("Main Dictionary: " + mainDictionary);
	}
	return mainDictionary;
};

var keysExistsAllInStages = function (applicationId, envKeyConstants) {
	var existsInAllStages = false;
	try {
		for(var stage in envKeyConstants){
			var keys = envKeyConstants[stage];
			for (var k in keys) {
				var keyName = keys[k];
				var commonKeyName = keyName.slice(7,keyName.length);
				if(stage == "Production"){
					commonKeyName = keyName.slice(4,keyName.length);
				}
				existsInAllStages = resManager.propertyExistsInStages(commonKeyName, applicationId, [stage]);
				if(!existsInAllStages){
					return false;
				}
			}
		}
	} catch (e) {
		log.error("Error while checking the existence of all keys in registry for application id : " + applicationId);
		log.error(e);
		throw e;
	}
	return true;
};

%>
